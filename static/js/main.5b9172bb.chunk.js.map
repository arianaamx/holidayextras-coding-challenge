{"version":3,"sources":["colors.ts","components/header/index.tsx","components/image-container/index.tsx","fetcher.ts","components/images-wrapper/index.tsx","App.tsx","index.tsx"],"names":["LightGrey","Blue","Header","setSearchByTag","HeaderContainer","Title","SearchInput","type","placeholder","onChange","event","target","value","styled","div","colors","input","ImageContainer","title","author","tags","description","link","media","Container","FlickrImage","src","alt","TitleAndAuthor","href","BoldedLink","match","Tags","replace","parseTags","img","p","span","GetPublicPhotos","setFetchedImages","searchByTag","fetchedImages","setHasMore","tag","jsonp","name","err","data","console","log","items","oldImages","newImages","newList","slice","uniqueResults","filter","obj","some","obj2","length","undefined","concat","addNewFetchedImages","ImagesWrapper","useState","hasMore","useEffect","ImagesContainer","dataLength","height","next","loader","endMessage","style","textAlign","marginTop","Images","map","element","index","m","App","AppContainer","AppHeader","header","ReactDOM","render","document","getElementById"],"mappings":"kPAAaA,EAAY,UAGZC,EAAO,U,OCsBLC,I,UAAAA,EAjBf,YAAkD,IAAhCC,EAA+B,EAA/BA,eAChB,OACE,cAACC,EAAD,UACE,eAACC,EAAD,WACE,qDACA,cAACC,EAAD,CACEC,KAAK,OACLC,YAAY,oBACZC,SAAU,SAACC,GACTP,EAAeO,EAAMC,OAAOC,MAAQF,EAAMC,OAAOC,MAAQ,aAU/DR,EAAkBS,IAAOC,IAAV,0WAKeC,EACHA,EACLA,GAYtBV,EAAQQ,IAAOC,IAAV,8LAWLR,EAAcO,IAAOG,MAAV,kGAGKD,GCzBPE,I,IAAAA,EAtBf,YAAiG,IAAvEC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,OAAqBC,GAA0C,EAAvDC,YAAuD,EAA1CD,MAAME,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,MAQhE,OACE,eAACC,EAAD,WACE,cAACC,EAAD,CAAaC,IAAKH,EAAOI,IAAI,KAC7B,eAACC,EAAD,WACE,mBAAGC,KAAMP,EAAT,SACE,cAACQ,EAAD,UAAaZ,MACV,IAHP,MAIK,cAACY,EAAD,WAAcX,EAAOY,MAAM,WAAa,IAAI,QAEjD,eAACC,EAAD,oBAhBc,SAACZ,GACjB,OAAKA,EAGEA,EAAKa,QAAQ,IAAK,MAFhB,IAcMC,CAAUd,UAOvBI,EAAYX,IAAOC,IAAV,2UFnCU,WEkDnBW,EAAcZ,IAAOsB,IAAV,qFAMXP,EAAiBf,IAAOuB,EAAV,iEAKdN,EAAajB,IAAOwB,KAAV,4LAGLtB,GAQLiB,EAAOnB,IAAOuB,EAAV,kM,iBC9CGE,EAAkB,SAAC,GAAwF,IAAtFC,EAAqF,EAArFA,iBAAkBC,EAAmE,EAAnEA,YAAaC,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,WAkBxEC,EAAMH,GAA4B,GAExCI,IA5CU,kCA4CD,oDAAgDD,GAAO,CAAEE,KAAM,mBAAoB,SAACC,EAAKC,GAChG,GAAID,EACFE,QAAQC,IAAIH,OACP,CACL,IAAII,EAAQH,EAAKG,MACbT,IACFS,EAzBsB,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,UAAWC,EAAsD,EAAtDA,UAAWV,EAA2C,EAA3CA,WAC/CW,EAAUF,EAAUG,MAAM,GAG1BC,EAAgBH,EAAUI,QAAO,SAAUC,GAC7C,OAAQN,EAAUO,MAAK,SAAUC,GAC/B,OAAOF,EAAIpC,cAAgBsC,EAAKtC,kBAQpC,OAJ6B,IAAzBkC,EAAcK,aAA+BC,IAAfnB,GAChCA,GAAW,GAGNW,EAAQS,OAAOP,GAWVQ,CAAoB,CAAEZ,UAAWV,EAAeW,UAAWL,EAAKG,MAAOR,WAAYA,KAE7FH,EAAiBW,Q,QCKRc,I,IAAAA,EAjDf,YAA6D,IAApCxB,EAAmC,EAAnCA,YAAmC,EAChByB,mBAAiB,IADD,mBACnDxB,EADmD,KACpCF,EADoC,OAE5B0B,oBAAkB,GAFU,mBAEnDC,EAFmD,KAE1CxB,EAF0C,KAY1D,OARAyB,qBAAU,WACR7B,EAAgB,CAAEC,uBACjB,IAEH4B,qBAAU,WACR7B,EAAgB,CAAEC,mBAAkBC,kBACnC,CAACA,IAGF,cAAC4B,EAAD,UACE,cAAC,IAAD,CACEC,WAAY5B,EAAemB,OAC3BM,QAASA,EACTI,OAAO,OACPC,KAAM,WACJjC,EAAgB,CAAEC,mBAAkBE,gBAAeC,gBAErD8B,OAAQ,wDACRC,WACE,oBAAIC,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAA7C,SACE,oEAVN,SAcE,cAACC,EAAD,eACqBhB,IAAlBpB,GACCA,EAAcqC,KAAI,SAACC,EAASC,GAC1B,OACE,cAAC,EAAD,CAEE9D,MAAO6D,EAAQ7D,MACfG,YAAa0D,EAAQ1D,YACrBF,OAAQ4D,EAAQ5D,OAChBG,KAAMyD,EAAQzD,KACdF,KAAM2D,EAAQ3D,KACdG,MAAOwD,EAAQxD,MAAM0D,GANhBD,aAkBjBZ,EAAkBvD,IAAOC,IAAV,wLJ9DS,WIyExB+D,EAAShE,IAAOC,IAAV,mQCxDGoE,MAZf,WAAgB,IAAD,EACyBjB,mBAAwB,MADjD,mBACNzB,EADM,KACOrC,EADP,KAEb,OACE,eAACgF,EAAD,WACE,cAACC,EAAD,UACE,cAAC,EAAD,CAAQjF,eAAgBA,MAE1B,cAAC,EAAD,CAAeqC,YAAaA,QAO5B2C,EAAetE,IAAOC,IAAV,+FAMZsE,EAAYvE,IAAOwE,OAAV,4CCrBfC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5b9172bb.chunk.js","sourcesContent":["export const LightGrey = \"#F2F2F2\";\r\nexport const LightLightBlue = \"#F8F7FF\";\r\nexport const LightBlue = \"#d9d4ff\";\r\nexport const Blue = \"#8e80ff\";\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as colors from \"../../colors\";\r\n\r\ninterface HeaderProps {\r\n  setSearchByTag: Dispatch<SetStateAction<string | null>>;\r\n}\r\n\r\nfunction Header({ setSearchByTag }: HeaderProps) {\r\n  return (\r\n    <HeaderContainer>\r\n      <Title>\r\n        <h2>Flickr Photo Stream</h2>\r\n        <SearchInput\r\n          type=\"text\"\r\n          placeholder=\"Search by tags...\"\r\n          onChange={(event) => {\r\n            setSearchByTag(event.target.value ? event.target.value : \"\");\r\n          }}\r\n        />\r\n      </Title>\r\n    </HeaderContainer>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\nconst HeaderContainer = styled.div`\r\n  width: 100%;\r\n  background-color: white;\r\n  line-height: 3em;\r\n\r\n  -webkit-box-shadow: 0px 1px 1px ${colors.LightGrey};\r\n  -moz-box-shadow: 0px 1px 1px ${colors.LightGrey};\r\n  box-shadow: 0px 2px 2px ${colors.LightGrey};\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  @media (max-width: 500px) {\r\n    line-height: 1.5em;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  margin: 5px 20px;\r\n  max-width: 1200px;\r\n  width: 100%;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  border: 3px solid ${colors.Blue};\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as colors from \"../../colors\";\r\n\r\ninterface ImageContainerProps {\r\n  title: string;\r\n  author: string;\r\n  description: string;\r\n  tags: string;\r\n  link: string;\r\n  media: string;\r\n}\r\n\r\nfunction ImageContainer({ title, author, description, tags, link, media }: ImageContainerProps) {\r\n  const parseTags = (tags: string) => {\r\n    if (!tags) {\r\n      return \"-\";\r\n    }\r\n    return tags.replace(\" \", \", \");\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <FlickrImage src={media} alt=\"\" />\r\n      <TitleAndAuthor>\r\n        <a href={link}>\r\n          <BoldedLink>{title}</BoldedLink>\r\n        </a>{\" \"}\r\n        by <BoldedLink>{(author.match(/\"(.+)\"/) || [])[1]}</BoldedLink>\r\n      </TitleAndAuthor>\r\n      <Tags>Tags: {parseTags(tags)}</Tags>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ImageContainer;\r\n\r\nconst Container = styled.div`\r\n  text-align: left;\r\n  padding: 10px 10px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  border: 3px solid ${colors.LightBlue};\r\n  margin: 5px 5px;\r\n\r\n  width: 250px;\r\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);\r\n\r\n  /* Display inline-block so the columns don't break the element */\r\n  display: inline-block;\r\n`;\r\n\r\nconst FlickrImage = styled.img`\r\n  width: 250px;\r\n  height: 200px;\r\n  object-fit: cover;\r\n`;\r\n\r\nconst TitleAndAuthor = styled.p`\r\n  height: 3em;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst BoldedLink = styled.span`\r\n  font-weight: 600;\r\n  text-decoration: underline;\r\n  color: ${colors.Blue};\r\n\r\n  display: inline-block;\r\n  vertical-align: bottom;\r\n  height: 1.5em;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Tags = styled.p`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  /* number of lines to show */\r\n  -webkit-line-clamp: 1;\r\n  -webkit-box-orient: vertical;\r\n`;\r\n","import jsonp from \"jsonp\";\r\n\r\n// ! Flickr server - jsonp\r\n\r\nconst URL = \"https://api.flickr.com/services\";\r\n\r\nexport type Item = {\r\n  title: string;\r\n  author: string;\r\n  description: string;\r\n  tags: string;\r\n  link: string;\r\n  media: { m: string };\r\n};\r\n\r\ntype GetPublicPhotosProps = {\r\n  setFetchedImages: Function;\r\n  searchByTag?: string | null;\r\n  fetchedImages?: Item[];\r\n  setHasMore?: Function;\r\n};\r\n\r\ntype AddNewFetchedImagesProps = {\r\n  oldImages: Item[];\r\n  newImages: Item[];\r\n  setHasMore: Function | undefined;\r\n};\r\n\r\nexport const GetPublicPhotos = ({ setFetchedImages, searchByTag, fetchedImages, setHasMore }: GetPublicPhotosProps) => {\r\n  const addNewFetchedImages = ({ oldImages, newImages, setHasMore }: AddNewFetchedImagesProps) => {\r\n    let newList = oldImages.slice(0);\r\n\r\n    // Find values that are in new fetched images but not in the old ones\r\n    let uniqueResults = newImages.filter(function (obj) {\r\n      return !oldImages.some(function (obj2) {\r\n        return obj.description === obj2.description;\r\n      });\r\n    });\r\n\r\n    if (uniqueResults.length === 0 && setHasMore !== undefined) {\r\n      setHasMore(false);\r\n    }\r\n\r\n    return newList.concat(uniqueResults);\r\n  };\r\n\r\n  const tag = searchByTag ? searchByTag : \"\";\r\n\r\n  jsonp(URL + `/feeds/photos_public.gne?format=json&tags=${tag}`, { name: \"jsonFlickrFeed\" }, (err, data) => {\r\n    if (err) {\r\n      console.log(err);\r\n    } else {\r\n      let items = data.items;\r\n      if (fetchedImages) {\r\n        items = addNewFetchedImages({ oldImages: fetchedImages, newImages: data.items, setHasMore: setHasMore });\r\n      }\r\n      setFetchedImages(items);\r\n    }\r\n  });\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as colors from \"../../colors\";\r\n\r\nimport ImageContainer from \"../image-container\";\r\nimport { GetPublicPhotos, Item } from \"../../fetcher\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\ninterface ImagesWrapperProps {\r\n  searchByTag: string | null;\r\n}\r\n\r\nfunction ImagesWrapper({ searchByTag }: ImagesWrapperProps) {\r\n  const [fetchedImages, setFetchedImages] = useState<Item[]>([]);\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    GetPublicPhotos({ setFetchedImages });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    GetPublicPhotos({ setFetchedImages, searchByTag });\r\n  }, [searchByTag]);\r\n\r\n  return (\r\n    <ImagesContainer>\r\n      <InfiniteScroll\r\n        dataLength={fetchedImages!.length}\r\n        hasMore={hasMore}\r\n        height=\"90vh\"\r\n        next={() => {\r\n          GetPublicPhotos({ setFetchedImages, fetchedImages, setHasMore });\r\n        }}\r\n        loader={<h2>Loading more images...</h2>}\r\n        endMessage={\r\n          <h3 style={{ textAlign: \"center\", marginTop: \"20px\" }}>\r\n            <b>You have seen all popular photos!</b>\r\n          </h3>\r\n        }\r\n      >\r\n        <Images>\r\n          {fetchedImages !== undefined &&\r\n            fetchedImages.map((element, index) => {\r\n              return (\r\n                <ImageContainer\r\n                  key={index}\r\n                  title={element.title}\r\n                  description={element.description}\r\n                  author={element.author}\r\n                  link={element.link}\r\n                  tags={element.tags}\r\n                  media={element.media.m}\r\n                />\r\n              );\r\n            })}\r\n        </Images>\r\n      </InfiniteScroll>\r\n    </ImagesContainer>\r\n  );\r\n}\r\n\r\nexport default ImagesWrapper;\r\n\r\nconst ImagesContainer = styled.div`\r\n  background-color: ${colors.LightLightBlue};\r\n  flex: 1;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px 20px;\r\n`;\r\n\r\nconst Images = styled.div`\r\n  max-width: 1200px;\r\n  column-count: 4;\r\n  text-align: center;\r\n\r\n  @media (max-width: 1300px) {\r\n    columns: 3;\r\n  }\r\n\r\n  @media (max-width: 950px) {\r\n    columns: 2;\r\n  }\r\n\r\n  @media (max-width: 650px) {\r\n    columns: 1;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Header from \"./components/header\";\nimport ImagesWrapper from \"./components/images-wrapper\";\n\nfunction App() {\n  const [searchByTag, setSearchByTag] = useState<string | null>(null);\n  return (\n    <AppContainer>\n      <AppHeader>\n        <Header setSearchByTag={setSearchByTag} />\n      </AppHeader>\n      <ImagesWrapper searchByTag={searchByTag} />\n    </AppContainer>\n  );\n}\n\nexport default App;\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nconst AppHeader = styled.header`\n  z-index: 10;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}